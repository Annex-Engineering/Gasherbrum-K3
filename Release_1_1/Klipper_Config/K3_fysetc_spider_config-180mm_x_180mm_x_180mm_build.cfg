# JUST A NOTE, THIS REQUIRES THE FOLLOWING KLIPPER MODULE TO FUNCTION: https://github.com/Annex-Engineering/klipper/blob/master/klippy/extras/dockable_probe.py
# Documentation can be found here: https://github.com/Annex-Engineering/klipper/blob/master/docs/Dockable_Probe.md

# This file has been created by Trails, of Annex Engineering, for the K3 3D Printer.
# Please change settings for your specific build or ensure you place your items in the same spots on the same MCU as I have.
# I've added as many options as I can think of for different displays as well as listed the available commands you can use via the terminal at the bottom of this configuration file.

#THIS CONFIG IS FOR A 180mm x 180mm x 180mm K3 PRINTER ONLY FOR THE FYSETC SPIDER CONTROLLER
#PLEASE READ THE WHOLE CONFIG BEFORE ATTEMPTING TO DO ANYTHING
#CONNECTORS/PORTS ON THE CONTROLLERS ARE NOTED WITH COMMENTS FOR EACH LOCATION/INPUT/OUTPUT

# use the following modifiers before the pin definition (ex: ^!ar99)
# ! 			invert the logic
# ^ 			activate 5v pullup (does not apply to all pins)
# mcu_name: 	use pins on additional MCU (ex: z:ar10)

# |------------------------|
# |        BACKPACK        |
# |------------------------|
# | Y  |    | Z1 |    | X1 |
# |-----    ------    -----|
# |                        |
# | ------          ------ |
# | | Z  |          | Z2 | |
# | ------          ------ |
# |-----              -----|
# | X  |              | Y1 |
# |------------------------|

# MCU SPIDER
[mcu] 
#   You will need to set this definition manually following the instructions in the line below
#	obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
restart_method: command

# EXP1 / EXP2 (display) pins
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC9, EXP1_2=PA8,
    EXP1_3=PC11, EXP1_4=PD2,
    EXP1_5=PC10, EXP1_6=PC12,    # Slot in the socket on this side
    EXP1_7=PD0, EXP1_8=PD1,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PC6, EXP2_4=PA4,
    EXP2_5=PC7, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PB10, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>


#virtual sdcard settings
[virtual_sdcard]
path: ~/gcode_files

#enable display status for moonraker
[display_status]

# Enable Pause/Resume Functionality
[pause_resume]

#Printer Speeds and Accels
[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 2000 # change this to 7500 after commissioning
max_z_velocity: 10   # may be able to increase to 15 after comissioning.
max_z_accel: 100
square_corner_velocity: 8.0 # start at 8, but then increase once you're sure assembly is sound

#Gcode G2/G3 Arc Support
[gcode_arcs]
resolution: 0.1

#Input Shaper Settings
# you need to tune your printer for this
# [input_shaper]
# shaper_freq_x:
# shaper_freq_y:
# shaper_type: mzv


# Stepper Configs
[stepper_x]
# connected to X Stepper on SPIDER
step_pin: PE11
dir_pin: !PE10
enable_pin: !PE9
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc2209_stepper_x:virtual_endstop 
position_min: -8
position_endstop: 180
position_max: 180
homing_speed: 50.0
homing_retract_dist: 0
homing_positive_dir: true

[stepper_x1]
# connected to Y Stepper on SPIDER
step_pin: PD8
dir_pin: PB12
enable_pin: !PD9
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc2209_stepper_x1:virtual_endstop 



[stepper_y]
# connected to Z Stepper on SPIDER
step_pin: PD14
dir_pin: PD13
enable_pin: !PD15
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc2209_stepper_y:virtual_endstop 
position_min: -2
position_endstop: -2
position_max: 184
homing_speed: 50.0
homing_retract_dist: 0
homing_positive_dir: false

[stepper_y1]
# connected to E0 Stepper on SPIDER
step_pin: PD5
dir_pin: !PD6
enable_pin: !PD4
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc2209_stepper_y1:virtual_endstop 



[stepper_z]
# connected to E1 Stepper on SPIDER
step_pin: PE6
dir_pin: !PC13
enable_pin: !PE5
# 5:1 Belted Z attached to a 1.8deg Motor
rotation_distance: 40
gear_ratio: 5:1
microsteps: 16
full_steps_per_rotation: 200 #change to 400 for a 0.9deg motor

# TR12x2 Leadscrew attached to a 1.8deg Motor
#rotation_distance: 2
#gear_ratio: 2:1
#microsteps: 4
#full_steps_per_rotation: 200 #change to 400 for a 0.9deg motor

# connected to Z- Endstop on SPIDER
endstop_pin: probe:z_virtual_endstop
position_max: 170 #this is set here on purpose, your actual travel will vary based on spring compression holding the bed, adjust at your own risk
position_min: -5
homing_speed: 15.0
second_homing_speed: 5.0
homing_retract_dist: 10.0
homing_positive_dir: false
 
[stepper_z1]
# connected to E2 Stepper on SPIDER
step_pin: PE2
dir_pin: !PE4
enable_pin: !PE3
# 5:1 Belted Z attached to a 1.8deg Motor
rotation_distance: 40
gear_ratio: 5:1
microsteps: 16
full_steps_per_rotation: 200 #change to 400 for a 0.9deg motor

# TR12x2 Leadscrew attached to a 1.8deg Motor
#rotation_distance: 2
#gear_ratio: 2:1
#microsteps: 4
#full_steps_per_rotation: 200 #change to 400 for a 0.9deg motor
 
[stepper_z2]
# connected to E3 Stepper on SPIDER
step_pin: PD12
dir_pin: PC4
enable_pin: !PE8
# 5:1 Belted Z attached to a 1.8deg Motor
rotation_distance: 40
gear_ratio: 5:1
microsteps: 16
full_steps_per_rotation: 200 #change to 400 for a 0.9deg motor

# TR12x2 Leadscrew attached to a 1.8deg Motor
#rotation_distance: 2
#gear_ratio: 2:1
#microsteps: 4
#full_steps_per_rotation: 200 #change to 400 for a 0.9deg motor



# TMC Stepper Configurations for All Motors
[tmc2209 stepper_x]
# connected to X Stepper on SPIDER
uart_pin: PE7
interpolate: true
run_current: 1.0 
sense_resistor: 0.110
stealthchop_threshold: 0
# Place a jumper on the two pin header near the endstop for sensorless homing
diag_pin: PB14 #connected to X Endstop (X Jumper Header)
# You may need to tune this value.  See https://www.klipper3d.org/TMC_Drivers.html#sensorless-homing
driver_SGTHRS: 115

[tmc2209 stepper_x1]
# connected to Y Stepper on SPIDER
uart_pin: PE15
interpolate: true
run_current: 1.0 
sense_resistor: 0.110
stealthchop_threshold: 0
# Place a jumper on the two pin header near the endstop for sensorless homing
diag_pin: PB13 #connected to Y Endstop (Y Jumper Header)
# You may need to tune this value.  See https://www.klipper3d.org/TMC_Drivers.html#sensorless-homing
driver_SGTHRS: 115

[tmc2209 stepper_y]
# connected to Z Stepper on SPIDER
uart_pin: PD10
interpolate: true
run_current: 1.0  
sense_resistor: 0.110
stealthchop_threshold: 0
# Place a jumper on the two pin header near the endstop for sensorless homing
diag_pin: PA0 #connected to Z Endstop (Z Jumper Header)
# You may need to tune this value.  See https://www.klipper3d.org/TMC_Drivers.html#sensorless-homing
driver_SGTHRS: 115

[tmc2209 stepper_y1]
# connected to E0 Stepper on SPIDER
uart_pin: PD7
interpolate: true
run_current: 1.0 
sense_resistor: 0.110
stealthchop_threshold: 0
# Place a jumper on the two pin header near the endstop for sensorless homing
diag_pin: PA3 #connected to E0 Endstop (E0 Jumper Header)
# You may need to tune this value.  See https://www.klipper3d.org/TMC_Drivers.html#sensorless-homing
driver_SGTHRS: 115
 
[tmc2209 stepper_z]
# connected to E1 Stepper on SPIDER
uart_pin: PC14
interpolate: true
run_current: 1.0 
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 stepper_z1]
# connected to E2 Stepper on SPIDER
uart_pin: PC15
interpolate: true
run_current: 1.0 
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 stepper_z2]
# connected to E3 Stepper on SPIDER
uart_pin: PA15
interpolate: true
run_current: 1.0 
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 extruder]
# connected to E4 Stepper on SPIDER
uart_pin: PD11
interpolate: false
run_current: 0.3
sense_resistor: 0.110
stealthchop_threshold: 0


# Force Move used to force a single stepper to move. Not used once setup complete
[force_move]
enable_force_move: true


# Dockable Probe
[dockable_probe]
# connected to E1 (Y-Max Port) Endstop on SPIDER
pin: ^PA2
x_offset: -25.0 # offset for microswitch x direction off nozzle
y_offset: -1.95 # offset for microswitch y direction off nozzle
z_offset: 2 # offset for microswitch in z height - this is a starting point only
samples: 3
sample_retract_dist: 5
samples_result: median
samples_tolerance: 0.02
samples_tolerance_retries: 3
speed: 3
lift_speed: 15

# annexed probe specific
dock_position:             -8,181,20 #back left corner of gantry
approach_position:         32,181,20
detach_position:           -8,141,20
safe_z_position:           90,90 #center of bed
attach_speed:              20
detach_speed:              100
travel_speed:              300
check_open_attach:         True
dock_fixed_z:              True
dock_retries:			   1

#   Optional custom gcode sections for annexed probe
pre_attach_gcode:
    G1 X40 Y40 F18000    #keep umbilical from catching on stuff
pre_detach_gcode:
    G1 X40 Y40 F18000   #keep umbilical from catching on stuff
    
post_attach_gcode:
    G1 X40 Y181 F18000   # Exit the probe dock before continuing (no more probes in the purge bucket)
post_detach_gcode:
    G1 X40 Y181 F18000   # After detaching, return to reasonable position


# Extruder0
[extruder]
# connected to E4 Stepper on SPIDER
step_pin: PE1
dir_pin: !PE0
enable_pin: !PC5
rotation_distance: 22.67895 #for 5mm Shaft Driven Bondtech gearsets
gear_ratio: 5:1 #Sherpa Mini 10t uses 5:1 or 8t uses 50:8, Folded Ascender Use 40:1 or 20:1
microsteps: 16
full_steps_per_rotation: 200 #1.8 deg motor

#0.4mm Nozzle
nozzle_diameter: 0.400
#pressure_advance: 0.035
#pressure_advance_smooth_time: 0.040
filament_diameter: 1.750	
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 120.0
max_extrude_only_accel: 1500.0
max_extrude_cross_section: 20000.0


# connected to Heater0 on SPIDER
heater_pin: PB15
max_power: 1.0

# connected to Thermistor0 on SPIDER
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC0

#Hotend PID Settings
control: pid
pid_Kp: 32.426 
pid_Ki: 1.743
pid_Kd: 150.782

min_extrude_temp: 0
min_temp: 0
max_temp: 300


 
# Heated Bed  
[heater_bed]
# connected to Heater1 on SPIDER
heater_pin: PC8
# NTC 100K MGB18-104F39050L32 is for Kenovo thermistors
sensor_type: NTC 100K MGB18-104F39050L32
# connected to Thermistor1 on SPIDER
sensor_pin: PC1
smooth_time: 3.0

#Build Plate PID Settings
max_power: 0.4
control: pid
pid_Kp: 42.475 
pid_Ki: 1.395 
pid_Kd: 323.339
min_temp: 0
max_temp: 110

#Raspberry Pi Temperature Sensor
[temperature_sensor pi_cpu]
sensor_type: temperature_host
gcode_id: P

 
# Fans  
# Hotend Cooling Fan
[heater_fan my_nozzle_fan]
# connected to Fan0 on SPIDER - 12v Fan
pin: PB0
max_power: 1.0
hardware_pwm: false
kick_start_time: 0.500
heater: extruder
heater_temp: 75.0
fan_speed: 1.00
 
# print cooling fan
[fan]
# connected to Fan1 on SPIDER - 12v Fan
pin: PB1
max_power: 1.0
kick_start_time: 0.500
  
#	thermally and driver_on controlled electronics bay fan (wire fans in parallel into the single connector)
[controller_fan electronics_fan_1]
# connected to Fan2 on SPIDER - 24v Fan
pin: PB2
max_power: 1.0
kick_start_time: 0.500
fan_speed: 1.00
idle_timeout: 60
heater: heater_bed


# Mesh Bed Settings
[bed_mesh]
speed: 200
horizontal_move_z: 20.0
mesh_min: 20,25
mesh_max: 150, 155
probe_count: 5,5
fade_start: 0.5
fade_end: 2
split_delta_z: .025
move_check_distance: 5.0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.1
relative_reference_index: 12  # ^^^because were measuring the offset from the nozzle switch to the bed using the center of the bed, the equation to find the location = (probe point count)/2-1

# Z Tilt Bed Adjustment settings
[z_tilt]
#3 Z Motors
z_positions: 
    -74.0, -18.0    # Front Left
    76.0,  217.0    # Rear
    226.0, -18.0    # Front Right
points:
    45, 25          # Front Left
    101, 160        # Rear
    175, 25         # Front Right
speed: 200
horizontal_move_z: 20.0
retries: 4
retry_tolerance: 0.01


# Motor and Heater Idle Timeout
[idle_timeout]
timeout: 6000


#	Macros
#	pre-print-prep macro
[gcode_macro pre_print_prep]
gcode:
    chamber_lighting_on ;turn on lighting
    abs_warmup_temp ;tell bed to warm up
    Z_TILT_ADJUST	;adjust bed so its square to gantry
    BED_MESH_CALIBRATE ;Run Bed Mesh

#	macro to level the gantry.  use G32 in the terminal to call
[gcode_macro g32]
gcode:
    Z_TILT_ADJUST	;adjust bed so its square to gantry
    
#	macro to level bed to the gantry
[gcode_macro square_bed_to_machine]
gcode:
    G32	;adjust bed so its square to gantry

#	mesh bed level the machine
[gcode_macro mesh_bed_level_machine]
gcode:
    BED_MESH_CALIBRATE	;Run Bed Mesh

#	combined print start gcode macro that takes into account temperature from the slicer
[gcode_macro print_start]
# params:
#   EXTRUDER
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}
    {% set BED = params.BED|default(110) %}

    print_start_1			;print start macro 1
    M140 S{BED}			;set bed temperature and wait
    M109 S{EXTRUDER}		;set hotend temperature and wait
    M190 S{BED}			;set bed temperature and do not wait
    print_start_2			;print start macro 2
    prime_line_regular	;draw prime line in corner of bed

[gcode_macro print_start_1]
gcode:
    M104 S0 #cancel set temp
    M107 #turn cooling fans off
    G21  # set units to mm
    G90  # use absolute coordinates
    M83	# use relative extrusion
    G92 E0.0  # reset e count
    M220 S100 # reset speed multiplier
    Go_To_Purge_Location	#move to nozzle scrubber bucket

[gcode_macro print_start_2]
gcode:
    nozzle_clean		#clean nozzle
    
[gcode_macro prime_line_regular]
gcode:
    G1 Z20 F6000
    G1 X10 Y10 F12000
    G1 Z0.5 F600
    G1 Y105 E10 F1000
    G1 Y115 E2.5 F1000
    G92 E0.0             ;set extruder to Zero
    G92 Z0.5             ;let printer know its at 0.5
    G90                  ;set to absolute

#    Use print_end for your slicer ending script 
[gcode_macro print_end]
variable_x_retract:         2       # distance to move x on initial move away from print
variable_y_retract:         2       # distance to move y on initial move away from print
variable_z_retract:         1       # distance to lift z on initial move away from print
variable_z_min:             130     # minimum z height to end at
variable_z_lift:            10      # minimum distance to lift z on final move
variable_x_end:             160     # x position to end at
variable_y_end:             180     # y position to end at
variable_heatbed_off:       True    # whether or not to turn off heatbed
variable_motors_off:        True    # whether or not to turn off motors
gcode:
    {% set x_mid = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_mid = printer.toolhead.axis_maximum.y / 2 %}
    {% set z_max = printer.toolhead.axis_maximum.z %}

    # get x retract distance
    {% if printer.toolhead.position.x < x_mid %}
        {% set x_dist = x_retract|abs %}
    {% else %}
        {% set x_dist = -(x_retract|abs) %}
    {% endif %}
    
    # get y retract distance
    {% if printer.toolhead.position.y < y_mid %}
        {% set y_dist = y_retract|abs %}
    {% else %}
        {% set y_dist = -(y_retract|abs) %}
    {% endif %}
    
    # get z retract distance
    {% if printer.toolhead.position.z + z_retract < z_max %}
        {% set z_dist = z_retract %}
    {% else %}
        {% set z_dist = z_max - printer.toolhead.position.z %}
    {% endif %}

    SAVE_GCODE_STATE NAME=END_state

    # disengage from print
    M83                                     # relative extrusion
    G91                                     # relative positioning
    G1 E-0.3 F4800                          # retract 0.3mm of filament
    G1 X{x_dist} Y{y_dist} Z{z_dist} F6000  # short quick move to disengage from print
    G90                                     # absolute positioning

    Go_To_Purge_Location    # move over bucket
    G0 E10 F400             # extrude filament to get better blob on end
    G0 E-0.3 F1800          # retract additional filament to move out of melt zone
    Wipe_Nozzle             # wipe nozzle

    M104 S0                 # turn off hotend
    {% if heatbed_off %}
        M140 S0             # turn off heatbed
    {% endif %}

    # move to x and y ending positions
    G1 X{x_end} Y{y_end}

    # move to z ending position
    {% if printer.toolhead.position.z + z_lift < z_min %}
        G1 Z{z_min}
    {% elif printer.toolhead.position.z + z_lift < z_max %}
        G91
        G1 Z{z_lift}
        G90
    {% else %}
        G1 Z{z_max}
    {% endif %}

    RESTORE_GCODE_STATE NAME=END_state

    M107                    # turn off part cooling fans
    {% if motors_off %}
        M84                 # turn off motors
    {% endif %}
    CLEAR_PAUSE             # clear pause state in case it was enabled

#	Macro to execute when pausing printer
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

#	Macro to execute when resuming printer
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

#	Macro to execute when canceling a print
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    print_end #execute the print end macro
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

#	Notify when ABS Timer is complete
[delayed_gcode notify_chamber]
initial_duration: 0
gcode:
    {gcode.action_respond_info("action:prompt_begin Chamber Preheated")}
    {action_respond_info("action:prompt_choice OK")}
    {action_respond_info("action:prompt_show")}

#	Set Temps for chamber warmup when printing with abs 
[gcode_macro abs_warmup_temp]
# params:
    # TEMP
gcode:
    {% set TEMP = params.TEMP|default(110) %}

    M106 S255					#turn part cooling fan on to blow heat around chamber
    M190 S{TEMP}				#set bed temperature and wait
    G28							#home machine
    G0 X90 Y90 Z20 F3000		#move to center of bed
    UPDATE_DELAYED_GCODE ID=notify_chamber DURATION=1200

#	Notify when filament is unloaded and ready to reload
[delayed_gcode notify_extruder_reload]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin Ready to Load Filament")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Load Filament
[gcode_macro load_filament]
# params:
#   EXTRUDER
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}

    turn_fans_off			#turn part cooling fans off
    G0 X10 Y40 F18000		#move to area where can easily load filament
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 50|float %}    #if z position >= 50mnm do the following
        #do nothing
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z50 F600     #move z to 50mm
    {% endif %}
    M109 S{EXTRUDER}		#set hotend temperature and wait
    M83						#relative positioning on extruder	
    G0 E120 F400  			#prime extruder
    M109 S0					#turn off extruder
    UPDATE_DELAYED_GCODE ID=notify_extruder_load DURATION=10

#	Notify when filament is loaded
[delayed_gcode notify_extruder_load]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin FIlament is Loaded")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Unload Filament
[gcode_macro unload_filament]
# params:
#   EXTRUDER
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}

    turn_fans_off			#turn part cooling fans off
    G0 X10 Y40 F18000		#move to area where can easily load filament
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 50|float %}    #if z position >= 50mnm do the following
        #do nothing
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z50 F600     #move z to 50mm
    {% endif %}
    M109 S{EXTRUDER}		#set hotend temperature and wait	
    M83						#relative positioning on extruder
    G0 E5 F400			#extrude filament to get better blob on end
    G0 E-600 F1800  		#retract additional filament to move out of melt zone
    UPDATE_DELAYED_GCODE ID=notify_extruder_reload DURATION=10

#	Scrubs the nozzle on the brass brush or silicone wiper located in the build chamber
[gcode_macro nozzle_clean]
gcode:
    SAVE_GCODE_STATE NAME=clean_nozzle_state	#store current nozzle location
    Wipe_Nozzle
    RESTORE_GCODE_STATE NAME=clean_nozzle_state MOVE=1 #restore current nozzle location

#   Settings for the nozzle wiper
[gcode_macro Nozzle_Wiper_Variables]
# the values below are for a wiper located at (-8, 121)
variable_purge_x:       -8  # x purge location
variable_purge_y:       112 # y purge location
variable_purge_x_entry: 0   # x entry location before going to the purge location
variable_purge_y_entry: 112 # y entry location before going to the purge location
variable_wipe_dx:       0   # distance to move in x from the purge position in order to wipe
variable_wipe_dy:       16  # distance to move in y from the purge position in order to wipe
variable_wipe_count:    2   # number of wipe cycles
variable_travel_speed:  300 # how fast travel speeds will be performed
variable_entry_speed:   100 # how fast to move from the entry location to the purge location
variable_wipe_speed:    50  # how fast to move when wiping
variable_purge_speed:   7   # how fast to extrude in mm/s when purging
variable_purge_fan:     64  # default fan speed out of 255 when purging
variable_wipe_fan:      128 # default fan speed out of 255 when wiping
gcode:

#   Move above the purge bucket
[gcode_macro Go_To_Purge_Location]
gcode:
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set St = printer["gcode_macro Nozzle_Wiper_Variables"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}

    SAVE_GCODE_STATE NAME=Go_To_Purge_Location_state
    G90

    {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}
        G1 X{Pxe} Y{Pye} F{St}
        G1 X{Px} Y{Py} F{Se}
    {% endif %}

    RESTORE_GCODE_STATE NAME=Go_To_Purge_Location_state

#   Wipe the nozzle on the brass brush or silicone wiper
[gcode_macro Wipe_Nozzle]
# params:
#   OLD_FAN_SPEED
gcode:
    {% set OLD_FAN_SPEED = params.OLD_FAN_SPEED|default(-1)|int %}
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set Wdx = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dx|float %}
    {% set Wdy = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dy|float %}
    {% set Wc = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_count|int %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}
    {% set Sw = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_fan %}
    
    {% if OLD_FAN_SPEED == -1 %}
        {% set old_Sf = printer.fan.speed %}
    {% else %}
        {% set old_Sf = OLD_FAN_SPEED %}
    {% endif %}
    
    {% if printer.fan.speed < Sf %}
        {% set wait_for_fan = True %}
    {% else %}
        {% set wait_for_fan = False %}
    {% endif %}

    SAVE_GCODE_STATE NAME=Wipe_Nozzle_state
    G90

    # go to purge location
    Go_To_Purge_Location

    # set fan speed for wiping
    M106 S{Sf}
    
    # wait for fan to cool filament if needed
    {% if wait_for_fan %}
        G4 P800
    {% endif %}

    # wipe nozzle
    G1 X{Px + Wdx} Y{Py + Wdy} F12000
    {% for i in range(Wc) %}
        G1 X{Px} Y{Py} F{Sw}
        G1 X{Px + Wdx} Y{Py + Wdy} F{Sw}
    {% endfor %}

    # move away from wiper
    G1 X{Pxe + Wdx} Y{Pye + Wdy} F{Se}

    # restore fan speed
    M106 S{(old_Sf * 255)|int}

    RESTORE_GCODE_STATE NAME=Wipe_Nozzle_state

#   Purge material into the bucket
[gcode_macro Purge]
description: Extrude into the purge bucket and wipe the nozzle
# params:
#   EXACT_TEMP:     whether to cool to specified temperature if already above it
#   TEMPERATURE:    minimum extruder temperature before purging
#   FEED_AMOUNT:    length of material in mm to purge
#   MAX_FEED:       max extrude length for a single purge strip. Set to -1 to disable length limit.
gcode:
    {% set EXACT_TEMP = params.EXACT_TEMP|default(False) %}
    {% set TEMPERATURE = params.TEMPERATURE|default(230.0)|float %}
    {% set FEED_AMOUNT = params.FEED_AMOUNT|default(15.0)|float %}
    {% set MAX_FEED = params.MAX_FEED|default(8.0)|float %}

    {% set Sp = printer["gcode_macro Nozzle_Wiper_Variables"].purge_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].purge_fan %}
    {% set old_Sf = printer.fan.speed %}

    SAVE_GCODE_STATE NAME=Purge_state

    # make sure FEED_AMOUNT is at least 3 to avoid negative E movements
    {% if FEED_AMOUNT < 3 %}
        {% set FEED_AMOUNT = 3 %}
    {% endif %}
    
    # go to purge location
    Go_To_Purge_Location

    # wait for hotend
    {% if EXACT_TEMP|lower == 'true' or printer.extruder.temperature < TEMPERATURE %}
        M109 S{TEMPERATURE}
    {% endif %}

    # set fan speed for purging
    M106 S{Sf}

    # relative extrusion
    M83

    # if extrude length is unlimited, purge a single strip
    {% if MAX_FEED == -1 %}
        # extrude
        G1 E{FEED_AMOUNT - 3} F{Sp}
        G1 E3 F100

    # else purge multiple smaller strips
    {% else %}
        {% for i in range(((FEED_AMOUNT - 3) / MAX_FEED)|int) %}
            # go to purge location
            Go_To_Purge_Location
            
            # extrude
            G1 E{MAX_FEED - 3} F{Sp}
            G1 E3 F100

            # wait
            G4 P800

            # wipe the nozzle
            Wipe_Nozzle OLD_FAN_SPEED={Sf}
        {% endfor %}

        # purge remainder
        {% set remainder = (FEED_AMOUNT - 3)|int % MAX_FEED|int %}
        Go_To_Purge_Location
        G1 E{remainder} F{Sp}
        G1 E3 F100
    {% endif %}

    # reset E position
    G92 E0.0

    # wait
    G4 P800

    # wipe the nozzle
    Wipe_Nozzle OLD_FAN_SPEED={old_Sf}

    RESTORE_GCODE_STATE NAME=Purge_state

#	Macro for M600 - filament out pause resume 
[gcode_macro M600]
# params:
#   X
#   Y
#   Z
gcode:
    {% set X = params.X|default(40) %}
    {% set Y = params.Y|default(40) %}
    {% set Z = params.Z|default(10) %}

    {% if printer.toolhead.status == "Ready" %}
        # do nothing
    {% else %}
        M117 Filament Change
        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        G91
        G1 E-5 F4000
        G1 Z{Z}
        G90
        G1 X{X} Y{Y} F3000
        G0 E15 F1800			#extrude filament to get better blob on end
        G0 E-500 F4800  		#retract additional filament to move out of melt zone
        RESTORE_GCODE_STATE NAME=M600_state
    {% endif %}

#	Use this command to load filament during a mid print filament swap	
[gcode_macro SWAP_RESUME] 
gcode:
     M117 Printing...
    LOAD_FILAMENT
    RESUME

#	Macro to Turn Fans Off
[gcode_macro turn_fans_off]
gcode:
    M107

#	Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing: M204.1
variable_ratio: 1.0     # ratio of accel_to_decel/accel
gcode:

   {% if 'P' in params %}{% set accel = params.P %}{% endif %}
   {% if 'S' in params %}{% set accel = params.S %}{% endif %}
   {% if 'T' in params %}{% set accel = params.T %}{% endif %}

    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float * ratio }

#	Macro to Attach the Magnetic Probe
[gcode_macro attach_probe_to_toolhead]
gcode:
    ATTACH_PROBE
    
#	Macro to Detach the Magnetic Probe
[gcode_macro detach_probe_from_toolhead]
gcode:
    DETACH_PROBE
